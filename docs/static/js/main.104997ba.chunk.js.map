{"version":3,"sources":["features/task/taskSlice.ts","themes/start.js","app/store.ts","features/task/NewDay.tsx","features/task/taskMenu.tsx","features/task/Task.tsx","features/task/TasksList.tsx","features/task/StaticTask.tsx","features/task/NewTask.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskType","theme","space","fonts","body","heading","moonospace","fontSizes","fontWeights","bold","lineHeights","colors","text","background","primary","secondary","highlight","muted","gray","accent","darken","modes","dark","marginBottom","forms","input","paddingLeft","paddingRight","paddingTop","paddingBottom","checkbox","borderColor","color","cards","padding","borderRadius","boxShadow","menu","backgroundColor","styles","root","fontFamily","lineHeight","fontWeight","h1","fontSize","h2","margin","h3","h4","h5","h6","p","a","pre","overflowX","code","table","width","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","img","maxWidth","tasksAdapter","createEntityAdapter","sortComparer","b","Date","created","tasksSlice","createSlice","name","initialState","getInitialState","reducers","taskAdded","addOne","taskUpdated","upsertOne","tasksUpdated","upsertMany","taskRemoved","removeOne","tasksRemoved","removeMany","getCompleted","state","taskSelectors","selectAll","filter","t","complete","actions","getSelectors","tasks","persistConfig","key","storage","rootReducer","combineReducers","tasksReducer","persistedReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","NewDay","dispatch","useDispatch","completedTasks","useSelector","handleClick","useCallback","remove","type","Other","PDP","Quick","map","id","update","Most","Rhythm","toString","updated","completed","undefined","StyledLink","onClick","styled","NavLink","deleteTask","taskId","move","task","TaskMenu","importantTask","selectById","useState","right","top","dims","setDims","buttonRef","useRef","moveOther","moveQuick","movePDP","moveImportant","updates","push","nanoid","onDelete","onOpen","buttonPos","current","getBoundingClientRect","y","PortalWithState","closeOnOutsideClick","closeOnEsc","openPortal","portal","closePortal","isOpen","Fragment","StyledIconButton","ref","fill","height","preserveAspectRatio","viewBox","fillRule","clipRule","d","StyledCard","variant","sx","left","UL","LI","children","as","cursor","bg","IconButton","Card","ul","Task","taskValue","setTaskValue","setComplete","handleChange","ev","target","value","inputEl","useEffect","updateTask","updatedTask","handleBlur","trim","handleKeypress","blur","handleCheck","nTask","StyledFlex","StyledLabel","checked","onChange","StyledInput","onBlur","onKeyDown","textDecoration","Input","Flex","Label","TasksList","listTasks","sort","StaticTask","taskType","className","taskSelector","useMemo","shallowEqual","SpaceBox","Box","NewTask","textVal","setTextVal","onKeypress","placeholder","borderWidth","MainTask","App","loading","justifyContent","gap","columns","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAGYA,E,uECsJGC,EAzJD,CACZC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KACvCC,MAAO,CACLC,KAAM,iGACNC,QAAS,iGACTC,WAAY,oBAEdC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5CC,YAAa,CACXJ,KAAM,IACNC,QAAS,IACTI,KAAM,KAERC,YAAa,CACXN,KAAM,KACNC,QAAS,MAEXM,OAAQ,CACNC,KAAM,UACNC,WAAY,OACZC,QAAS,UACTC,UAAW,UACXC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,MAAO,CACLC,KAAM,CACJV,KAAM,UACNC,WAAY,UACZC,QAAS,UACTC,UAAW,UACXC,UAAW,UACXC,MAAO,aAIbL,KAAM,CACJP,QAAS,CAAEkB,aAAc,IAE3BC,MAAO,CACLC,MAAO,CACLC,YAAa,EACbC,aAAc,EACdC,WAAY,EACZC,cAAe,GAEjBC,SAAU,CACRC,YAAa,QACbC,MAAO,UAGXC,MAAO,CACLnB,QAAS,CACPoB,QAAS,EACTC,aAAc,EACdC,UAAW,gCAEbC,KAAM,CACJC,gBAAiB,aACjBJ,QAAS,EACTC,aAAc,EACdC,UAAW,iCAGfG,OAAQ,CACNC,KAAM,CACJC,WAAY,OACZC,WAAY,OACZC,WAAY,QAEdC,GAAI,CACFZ,MAAO,OACPS,WAAY,UACZC,WAAY,UACZC,WAAY,UACZE,SAAU,GAEZC,GAAI,CACFd,MAAO,OACPS,WAAY,UACZC,WAAY,UACZC,WAAY,UACZI,OAAQ,EACRF,SAAU,GAEZG,GAAI,CACFhB,MAAO,OACPS,WAAY,UACZC,WAAY,UACZC,WAAY,UACZE,SAAU,GAEZI,GAAI,CACFjB,MAAO,OACPS,WAAY,UACZC,WAAY,UACZC,WAAY,UACZE,SAAU,GAEZK,GAAI,CACFlB,MAAO,OACPS,WAAY,UACZC,WAAY,UACZC,WAAY,UACZE,SAAU,GAEZM,GAAI,CACFnB,MAAO,OACPS,WAAY,UACZC,WAAY,UACZC,WAAY,UACZE,SAAU,GAEZO,EAAG,CACDpB,MAAO,OACPS,WAAY,OACZE,WAAY,OACZD,WAAY,QAEdW,EAAG,CACDrB,MAAO,WAETsB,IAAK,CACHb,WAAY,YACZc,UAAW,OACXC,KAAM,CACJxB,MAAO,YAGXwB,KAAM,CACJf,WAAY,YACZI,SAAU,WAEZY,MAAO,CACLC,MAAO,OACPC,eAAgB,WAChBC,cAAe,GAEjBC,GAAI,CACFC,UAAW,OACXC,kBAAmB,SAErBC,GAAI,CACFF,UAAW,OACXC,kBAAmB,SAErBE,IAAK,CACHC,SAAU,U,iEDlJJlE,O,mBAAAA,I,eAAAA,I,iBAAAA,I,iBAAAA,I,cAAAA,M,KAmBZ,IAAMmE,EAAeC,YAA0B,CAC7CC,aAAc,SAAChB,EAAGiB,GAAJ,OAAW,IAAIC,KAAKlB,EAAEmB,SAAW,IAAID,KAAKD,EAAEE,UAAY,EAAI,KAGtEC,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAAcT,EAAaU,kBAC3BC,SAAU,CAGRC,UAAWZ,EAAaa,OACxBC,YAAad,EAAae,UAC1BC,aAAchB,EAAaiB,WAC3BC,YAAalB,EAAamB,UAC1BC,aAAcpB,EAAaqB,cAGlBC,EAAe,SAACC,GAAD,OAAsBC,EAAcC,UAAUF,GAAOG,QAAO,SAACC,GAAD,OAAOA,EAAEC,a,EAEdtB,EAAWuB,QAA/EjB,E,EAAAA,UAAWM,E,EAAAA,YAAaJ,E,EAAAA,YAAaE,E,EAAAA,aAAcI,E,EAAAA,aACrDI,EAAgBxB,EAAa8B,cAAa,SAACP,GAAD,OAAsBA,EAAMQ,SACpEzB,IAAf,QEnCM0B,EAAgB,CACpBC,IAAK,OACLC,aAGIC,EAAmBC,YAAgB,CACvCL,MAAOM,IAGHC,EAAmBC,YAAoBP,EAAeG,GAE/CK,EAAQC,YAAe,CAClCC,QAASJ,IAEEK,EAAYC,YAAaJ,G,kGChB/B,IAAMK,EAAkB,WAC7B,IAAMC,EAAWC,cACXC,EAAiBC,YAAY3B,GAC7B4B,EAAcC,uBAAY,WAC9B,IAAIC,EAASJ,EACVtB,QAAO,SAACC,GAAD,OAAOA,EAAE0B,OAASxH,EAASyH,OAAS3B,EAAE0B,OAASxH,EAAS0H,KAAO5B,EAAE0B,OAASxH,EAAS2H,SAC1FC,KAAI,SAAC9B,GAAD,OAAOA,EAAE+B,MACZC,EAASX,EACVtB,QAAO,SAACC,GAAD,OAAOA,EAAE0B,OAASxH,EAAS+H,MAAQjC,EAAE0B,OAASxH,EAASgI,UAC9DJ,KAAI,SAAC9B,GACJ,OAAIA,EAAE0B,OAASxH,EAAS+H,KACf,CACLF,GAAI/B,EAAE+B,GACNjH,KAAM,GACNmF,UAAU,EACVvB,SAAS,IAAID,MAAO0D,WACpBC,SAAS,IAAI3D,MAAO0D,WACpBE,eAAWC,EACXZ,KAAM1B,EAAE0B,MAGL,CACLK,GAAI/B,EAAE+B,GACNL,KAAM1B,EAAE0B,KACR5G,KAAMkF,EAAElF,KACRmF,UAAU,EACVvB,SAAS,IAAID,MAAO0D,WACpBC,SAAS,IAAI3D,MAAO0D,eAG1BhB,EAAS9B,EAAa2C,IACtBb,EAAS1B,EAAagC,MACrB,CAACJ,EAAgBF,IACpB,OAAO,cAACoB,EAAD,CAAYC,QAASjB,EAArB,sBAGHgB,EAAaE,YAAOC,IAAPD,CAAH,K,sYC7BhB,IAIME,EAAa,SAACC,EAAgBzB,GAClCA,EAAS5B,EAAYqD,KAGjBC,EAAO,SAACC,EAAapB,EAAgBP,IAR5B,SAAC2B,EAAa3B,GAC3BA,EAAShC,EAAY2D,IASrBd,CADW,2BAAQc,GAAR,IAAcpB,SACXP,IAMH4B,EAA8B,SAAC,GAAc,IAAZD,EAAW,EAAXA,KACtCE,EAAgB1B,aAAY,SAAC1B,GAAD,OAAsBC,EAAcoD,WAAWrD,EAAO,WADjC,EAE/BsD,mBAAS,CAAEC,MAAO,EAAGC,IAAK,IAFK,mBAEhDC,EAFgD,KAE1CC,EAF0C,KAGjDnC,EAAWC,cACXmC,EAAYC,iBAAY,MAExBC,EAAYjC,uBAAY,WAC5BqB,EAAKC,EAAM5I,EAASyH,MAAOR,KAC1B,CAACA,EAAU2B,IAERY,EAAYlC,uBAAY,WAC5BqB,EAAKC,EAAM5I,EAAS2H,MAAOV,KAC1B,CAACA,EAAU2B,IAERa,EAAUnC,uBAAY,WAC1BqB,EAAKC,EAAM5I,EAAS0H,IAAKT,KACxB,CAACA,EAAU2B,IAERc,EAAgBpC,uBAAY,WAChC,IAAMqC,EAAU,GACZb,GAAwC,KAAvBA,EAAclI,MACjC+I,EAAQC,KAAR,2BAAkBd,GAAlB,IAAiCjB,GAAIgC,cAAUrC,KAAMxH,EAASyH,SAEhEkC,EAAQC,KAAR,2BAAkBhB,GAAlB,IAAwBf,GAAI,OAAQL,KAAMxH,EAAS+H,QACnDU,EAAWG,EAAKf,GAAIZ,GACpBwB,EAAW,OAAQxB,GACnBA,EAAS9B,EAAawE,MACrB,CAAC1C,EAAU6B,EAAeF,IAEvBkB,EAAWxC,uBAAY,kBAAMmB,EAAWG,EAAKf,GAAIZ,KAAW,CAACA,EAAU2B,EAAKf,KAC5EkC,EAASzC,uBAAY,WACzB,IAAM0C,EAAYX,EAAUY,QAAQC,wBACpCd,EAAQ,CAAEH,MAAOe,EAAUf,MAAOC,IAAKc,EAAUG,MAChD,IACH,OACE,YAACC,EAAA,EAAD,CAAiBC,qBAAmB,EAACC,YAAU,EAACP,OAAQA,IACrD,gBAAGQ,EAAH,EAAGA,WAAiCC,GAApC,EAAeC,YAAf,EAA4BC,OAA5B,EAAoCF,QAApC,OACC,YAAC,IAAMG,SAAP,KACE,YAACC,EAAD,CAAkBC,IAAKxB,EAAWf,QAASiC,GACzC,mBAAKO,KAAK,eAAepH,MAAM,KAAKqH,OAAO,KAAKC,oBAAoB,gBAAgBC,QAAQ,aAC1F,oBACEC,SAAS,UACTC,SAAS,UACTC,EAAE,kGAIPZ,EACC,YAACa,EAAD,CACEC,QAAQ,OACRC,GAAI,CACFC,KAAMrC,EAAKF,MAAQ,IACnBC,IAAKC,EAAKD,IAAM,KAIlB,YAACuC,GAAD,KACE,YAAC,EAAD,CAAInD,QAASwB,GAAb,UACClB,EAAKpB,OAASxH,EAASyH,OAAS,YAAC,EAAD,CAAIa,QAASoB,GAAb,kBAChCd,EAAKpB,OAASxH,EAASyH,OAAS,YAAC,EAAD,CAAIa,QAASiB,GAAb,iBAChCX,EAAKpB,OAASxH,EAAS2H,OAAS,YAAC,EAAD,CAAIW,QAASkB,GAAb,iBAChCZ,EAAKpB,OAASxH,EAAS0H,KAAO,YAAC,EAAD,CAAIY,QAASmB,GAAb,uBAazCiC,EAAkB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUrD,EAAc,EAAdA,QACnC,OACE,YAAC,IAAD,CACEsD,GAAG,KACHL,GAAI,CACFpJ,aAAc,EACd0J,OAAQ,UACR3J,QAAS,EACT,SAAU,CACR4J,GAAI,UACJ9J,MAAO,eAGXsG,QAASA,GAERqD,IAKDf,EAAmBrC,YAAOwD,IAAPxD,CAAH,KAKhB8C,EAAa9C,YAAOyD,IAAPzD,CAAH,KAKVkD,GAAKlD,IAAO0D,GAAV,K,oRC1HD,IAAMC,GAAsB,SAAC,GAAc,IAAZtD,EAAW,EAAXA,KAAW,EACbI,mBAAS,IADI,mBACxCmD,EADwC,KAC7BC,EAD6B,OAEfpD,oBAAS,GAFM,mBAExCjD,EAFwC,KAE9BsG,EAF8B,KAGzCC,EAAehF,uBAAY,SAACiF,GAAD,OAAQH,EAAaG,EAAGC,OAAOC,SAAQ,IAClExF,EAAWC,cACXwF,EAAUpD,iBAAY,MAC5BqD,qBAAU,WACRN,EAAYzD,EAAK7C,UACjBqG,EAAaxD,EAAKhI,QACjB,CAACgI,IACJ,IAAMgE,EAAatF,uBAAY,SAACuF,GAAD,OAAsB5F,EAAShC,EAAY4H,MAAe,CAAC5F,IACpF6F,EAAaxF,uBACjB,SAACiF,GAC0B,KAArBJ,EAAUY,QACZH,EAAW,CAAE/E,GAAIe,EAAKf,GAAIjH,KAAMuL,MAGpC,CAACvD,EAAKf,GAAIsE,EAAWS,IAEjBI,EAAiB1F,uBAAY,SAACiF,GACnB,UAAXA,EAAGnG,KACLsG,EAAQzC,QAAQgD,SAEjB,IACGC,EAAc5F,uBAClB,SAACiF,GACC,IAAMY,EAAQ,CACZtF,GAAIe,EAAKf,GACT9B,UAAWA,EACXoC,UAAYpC,EAAmC,MAAxB,IAAIxB,MAAO0D,YAEpC2E,EAAWO,KAEb,CAACpH,EAAU6C,EAAKf,GAAI+E,IAEtB,OACE,eAACQ,GAAD,CAAYvL,cAAe,EAAGD,WAAY,EAA1C,UACE,cAACyL,GAAD,UACE,cAAC,IAAD,CAAUC,QAASvH,EAAUwH,SAAUL,MAEzC,cAACM,GAAD,CACE3C,IAAK6B,EACLe,OAAQX,EACRY,UAAWV,EACXO,SAAUjB,EACVR,GAAI/F,EAAW,aAAe,QAC9B0G,MAAON,EACPnK,MAAO+D,EAAW,UAAY,OAC9BwF,GAAI,CAAEoC,eAAgB5H,EAAW,eAAiB,UAEpD,cAAC,EAAD,CAAU6C,KAAMA,QAKhB4E,GAAcjF,YAAOqF,IAAPrF,CAAH,MAIX6E,GAAa7E,YAAOsF,IAAPtF,CAAH,MAIV8E,GAAc9E,YAAOuF,IAAPvF,CAAH,MC9DJwF,GAAgC,SAAC,GAAc,IAAZvG,EAAW,EAAXA,KAI1CwG,EAHU5G,aAAY,SAAC1B,GACzB,OAAOC,EAAcC,UAAUF,MAEXG,QAAO,SAACC,GAAD,OAAcA,EAAE0B,OAASA,KAUtD,OATAwG,EAAUC,MAAK,SAAC5K,EAAGiB,GACjB,OAAKjB,EAAE0C,UAAYzB,EAAEyB,WAAe1C,EAAE0C,WAAazB,EAAEyB,SAC5C,EAEL1C,EAAE0C,SACG,GAED,KAGR,cAAC,IAAD,UACGiI,EAAUpG,KAAI,SAAC9B,GAAD,OACb,cAAC,GAAD,CAAiB8C,KAAM9C,GAAZA,EAAE+B,U,obCdrB,IAyEaqG,GAAa3F,aAzEA,SAAC,GAAqC,IAAnCG,EAAkC,EAAlCA,OAAQyF,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACvCC,EAAeC,mBAAQ,kBAAM3I,EAAcoD,aAAY,IACzDH,EAAOxB,aAAY,SAAC1B,GAAD,OAAsB2I,EAAa3I,EAAOgD,KAAS6F,KAFb,EAI3BvF,mBAAS,IAJkB,mBAItDmD,EAJsD,KAI3CC,EAJ2C,OAK7BpD,oBAAS,GALoB,mBAKtDjD,EALsD,KAK5CsG,EAL4C,KAMvDC,EAAehF,uBAAY,SAACiF,GAAD,OAAQH,EAAaG,EAAGC,OAAOC,SAAQ,IAClExF,EAAWC,cACXwF,EAAUpD,iBAAY,MACtBsD,EAAatF,uBAAY,SAACuF,GAAD,OAAsB5F,EAAShC,EAAY4H,MAAe,CAAC5F,IAC1F0F,qBAAU,WACJ/D,IACFyD,EAAYzD,EAAK7C,UACjBqG,EAAaxD,EAAKhI,SAEnB,CAACgI,IACJ,IAAMkE,EAAaxF,uBACjB,SAACiF,GAEG,IAAIzE,EADmB,KAArBqE,EAAUY,SAYVjF,EAVGc,EAUG,2BAAQA,GAAR,IAAchI,KAAMuL,IATjB,CACPtE,GAAIa,EACJ9H,KAAMuL,EACNpG,UAAU,EACVvB,SAAS,IAAID,MAAO0D,WACpBC,SAAS,IAAI3D,MAAO0D,WACpBT,KAAM2G,GAKVvB,EAAW9E,MAGf,CAACc,EAAMF,EAAQyF,EAAUhC,EAAWS,IAEhCI,EAAiB1F,uBAAY,SAACiF,GACnB,UAAXA,EAAGnG,KACLsG,EAAQzC,QAAQgD,SAEjB,IACGC,EAAc5F,uBAClB,SAACiF,GACC,IAAMY,EAAQ,CACZtF,GAAIa,EACJ3C,UAAWA,EACXoC,UAAYpC,EAAmC,MAAxB,IAAIxB,MAAO0D,YAEpC2E,EAAWO,KAEb,CAACpH,EAAU2C,EAAQkE,IAErB,OACE,eAAC,GAAD,CAAYwB,UAAWA,EAAWvM,cAAe,EAAjD,UACE,cAAC,GAAD,UACE,cAAC,IAAD,CAAUyL,QAASvH,EAAUwH,SAAUL,MAEzC,cAAC,GAAD,CACErC,IAAK6B,EACLe,OAAQX,EACRY,UAAWV,EACXO,SAAUjB,EACVR,GAAI/F,EAAW,aAAe,QAC9B/D,MAAO+D,EAAW,UAAY,OAC9BwF,GAAI,CAAEoC,eAAgB5H,EAAW,eAAiB,QAClD0G,MAAON,IAET,cAACqC,GAAD,SAKoBjG,CAAH,MAEjBiF,GAAcjF,YAAOqF,IAAPrF,CAAH,MAIX6E,GAAa7E,YAAOsF,IAAPtF,CAAH,MAIV8E,GAAc9E,YAAOuF,IAAPvF,CAAH,MAGXiG,GAAWjG,YAAOkG,IAAPlG,CAAH,M,iQCzFP,IAAMmG,GAA4B,SAAC,GAAkB,IAAhBP,EAAe,EAAfA,SAAe,EAC3BnF,mBAAS,IADkB,mBAClD2F,EADkD,KACzCC,EADyC,KAEnD3H,EAAWC,cACXoF,EAAehF,uBAAY,SAACiF,GAAD,OAAQqC,EAAWrC,EAAGC,OAAOC,SAAQ,IAChEoC,EAAavH,uBACjB,SAACiF,GAEC,GADAqC,EAAWrC,EAAGC,OAAOC,OACN,UAAXF,EAAGnG,KAAsC,KAAnBuI,EAAQ5B,OAAe,CAC/C,IAAInE,EAAa,CACff,GAAIgC,cACJjJ,KAAM+N,EACNnK,SAAS,IAAID,MAAO0D,WACpBC,SAAS,IAAI3D,MAAO0D,WACpBlC,UAAU,EACVyB,KAAM2G,GAERS,EAAW,IACX3H,EAASlC,EAAU6D,OAGvB,CAAC3B,EAAUkH,EAAUQ,IAGvB,OACE,eAAC,GAAD,CAAY/M,WAAY,EAAGC,cAAe,EAA1C,UACE,cAAC,GAAD,IACA,cAAC,GAAD,CACES,gBAAgB,UAChBwM,YAAY,WACZvB,SAAUjB,EACVoB,UAAWmB,EACX/C,GAAG,aACHP,GAAI,CAAExJ,YAAa,QAASgN,YAAa,GACzCtC,MAAOkC,IAET,cAAC,GAAD,QAKAnB,GAAcjF,YAAOqF,IAAPrF,CAAH,MACX6E,GAAa7E,YAAOsF,IAAPtF,CAAH,MAGViG,GAAWjG,YAAOkG,IAAPlG,CAAH,M,sGCId,IAAMyG,GAAWzG,YAAO2F,GAAP3F,CAAH,MAIC0G,GAlDf,WACE,OACE,cAAC,IAAD,CAAehP,MAAOA,EAAtB,SACE,cAAC,IAAD,CAAaiP,QAAS,KAAMpI,UAAWA,EAAvC,SACE,eAAC,IAAD,CAAW1D,EAAG,EAAd,UACE,cAAC,KAAD,CAAMwI,GAAG,MAAMuD,eAAe,WAA9B,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAMC,IAAK,EAAX,UACE,eAAC,IAAD,WACE,cAAC,IAAD,qBACA,eAAC,IAAD,CAAMC,QAAS,CAAC,EAAG,mBAAnB,UACE,cAACnB,GAAD,CAAYC,SAAUnO,EAASgI,OAAQU,OAAO,aAC9C,cAACwF,GAAD,CAAYC,SAAUnO,EAASgI,OAAQU,OAAO,aAC9C,cAACwF,GAAD,CAAYC,SAAUnO,EAASgI,OAAQU,OAAO,aAC9C,cAACwF,GAAD,CAAYC,SAAUnO,EAASgI,OAAQU,OAAO,mBAGlD,eAAC,IAAD,WACE,cAAC,IAAD,6BACA,cAACsG,GAAD,CAAUb,SAAUnO,EAAS+H,KAAMW,OAAO,YAE5C,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,cAAC,GAAD,CAAWlB,KAAMxH,EAASyH,QAC1B,cAAC,GAAD,CAAS0G,SAAUnO,EAASyH,WAE9B,eAAC,IAAD,CAAM2H,IAAK,EAAGC,QAAS,CAAC,EAAG,WAA3B,UACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,cAAC,GAAD,CAAW7H,KAAMxH,EAAS2H,QAC1B,cAAC,GAAD,CAASwG,SAAUnO,EAAS2H,WAE9B,eAAC,IAAD,WACE,cAAC,IAAD,wCACA,cAAC,GAAD,CAAWH,KAAMxH,EAAS0H,MAC1B,cAAC,GAAD,CAASyG,SAAUnO,EAAS0H,uBCtCxB4H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlJ,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJmJ,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.104997ba.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport enum TaskType {\n  Rhythm,\n  Most,\n  Other,\n  Quick,\n  PDP,\n}\n\nexport type Task = {\n  id: string;\n  text: string;\n  notes?: string;\n  created: string;\n  updated: string;\n  completed?: string;\n  complete: boolean;\n  type: TaskType;\n};\n\nconst tasksAdapter = createEntityAdapter<Task>({\n  sortComparer: (a, b) => (new Date(a.created) < new Date(b.created) ? -1 : 1),\n});\n\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState: tasksAdapter.getInitialState(),\n  reducers: {\n    // Can pass adapter functions directly as case reducers.  Because we're passing this\n    // as a value, `createSlice` will auto-generate the `taskAdded` action type / creator\n    taskAdded: tasksAdapter.addOne,\n    taskUpdated: tasksAdapter.upsertOne,\n    tasksUpdated: tasksAdapter.upsertMany,\n    taskRemoved: tasksAdapter.removeOne,\n    tasksRemoved: tasksAdapter.removeMany,\n  },\n});\nexport const getCompleted = (state: RootState) => taskSelectors.selectAll(state).filter((t) => t.complete);\n\nexport const { taskAdded, taskRemoved, taskUpdated, tasksUpdated, tasksRemoved } = tasksSlice.actions;\nexport const taskSelectors = tasksAdapter.getSelectors((state: RootState) => state.tasks);\nexport default tasksSlice.reducer;\n","const theme = {\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body: 'system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", sans-serif',\n    heading: 'system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", sans-serif',\n    moonospace: 'Menlo, monospace',\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 400,\n    heading: 600,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.75,\n    heading: 1.25,\n  },\n  colors: {\n    text: '#454f5b',\n    background: '#fff',\n    primary: '#5c6ac4',\n    secondary: '#006fbb',\n    highlight: '#47c1bf',\n    muted: '#EAEEFF',\n    gray: '#dfe3e8',\n    accent: '#f49342',\n    darken: '#00044c',\n    modes: {\n      dark: {\n        text: '#3e4155',\n        background: '#000639',\n        primary: '#9c6ade',\n        secondary: '#b4e1fa',\n        highlight: '#b7ecec',\n        muted: '#e6e6e6',\n      },\n    },\n  },\n  text: {\n    heading: { marginBottom: 3 },\n  },\n  forms: {\n    input: {\n      paddingLeft: 2,\n      paddingRight: 2,\n      paddingTop: 1,\n      paddingBottom: 1,\n    },\n    checkbox: {\n      borderColor: 'muted',\n      color: 'muted',\n    },\n  },\n  cards: {\n    primary: {\n      padding: 2,\n      borderRadius: 4,\n      boxShadow: '0 0 8px rgba(0, 0, 0, 0.125)',\n    },\n    menu: {\n      backgroundColor: 'background',\n      padding: 2,\n      borderRadius: 4,\n      boxShadow: '0 0 8px rgba(0, 0, 0, 0.125)',\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n    },\n    h1: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 5,\n    },\n    h2: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      margin: 2,\n      fontSize: 4,\n    },\n    h3: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 3,\n    },\n    h4: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 2,\n    },\n    h5: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 1,\n    },\n    h6: {\n      color: 'text',\n      fontFamily: 'heading',\n      lineHeight: 'heading',\n      fontWeight: 'heading',\n      fontSize: 0,\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body',\n    },\n    a: {\n      color: 'primary',\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit',\n      },\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit',\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0,\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid',\n    },\n    img: {\n      maxWidth: '100%',\n    },\n  },\n};\nexport default theme;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\n\r\nimport { combineReducers } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\nimport tasksReducer from '../features/task/taskSlice';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n};\r\n\r\nconst rootReducer: any = combineReducers({\r\n  tasks: tasksReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer<any>(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n});\r\nexport const persistor = persistStore(store);\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import React, { FC, useState, useCallback, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from '@emotion/styled';\nimport { Task as iTask, tasksRemoved, getCompleted, TaskType, tasksUpdated } from './taskSlice';\nimport { NavLink } from 'theme-ui';\n\nexport const NewDay: FC<any> = () => {\n  const dispatch = useDispatch();\n  const completedTasks = useSelector(getCompleted);\n  const handleClick = useCallback(() => {\n    let remove = completedTasks\n      .filter((t) => t.type === TaskType.Other || t.type === TaskType.PDP || t.type === TaskType.Quick)\n      .map((t) => t.id);\n    let update = completedTasks\n      .filter((t) => t.type === TaskType.Most || t.type === TaskType.Rhythm)\n      .map((t) => {\n        if (t.type === TaskType.Most) {\n          return {\n            id: t.id,\n            text: '',\n            complete: false,\n            created: new Date().toString(),\n            updated: new Date().toString(),\n            completed: undefined,\n            type: t.type,\n          };\n        }\n        return {\n          id: t.id,\n          type: t.type,\n          text: t.text,\n          complete: false,\n          created: new Date().toString(),\n          updated: new Date().toString(),\n        };\n      });\n    dispatch(tasksUpdated(update));\n    dispatch(tasksRemoved(remove));\n  }, [completedTasks, dispatch]);\n  return <StyledLink onClick={handleClick}>New Day</StyledLink>;\n};\n\nconst StyledLink = styled(NavLink)`\n  cursor: pointer;\n`;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useRef, useCallback, useState, FC } from 'react';\nimport { RootState } from '../../app/store';\n\nimport { IconButton, Card, Box } from 'theme-ui';\nimport styled from '@emotion/styled';\nimport { PortalWithState } from 'react-portal';\nimport { nanoid } from 'nanoid';\nimport { taskUpdated, tasksUpdated, Task as iTask, TaskType, taskRemoved, taskSelectors } from './taskSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst update = (task: iTask, dispatch: any) => {\n  dispatch(taskUpdated(task));\n};\n\nconst deleteTask = (taskId: string, dispatch: any) => {\n  dispatch(taskRemoved(taskId));\n};\n\nconst move = (task: iTask, type: TaskType, dispatch: any) => {\n  const nTask = { ...task, type };\n  update(nTask, dispatch);\n};\n\ntype TaskMenuProps = {\n  task: iTask;\n};\nexport const TaskMenu: FC<TaskMenuProps> = ({ task }) => {\n  const importantTask = useSelector((state: RootState) => taskSelectors.selectById(state, 'most'));\n  const [dims, setDims] = useState({ right: 0, top: 0 });\n  const dispatch = useDispatch();\n  const buttonRef = useRef<any>(null);\n\n  const moveOther = useCallback(() => {\n    move(task, TaskType.Other, dispatch);\n  }, [dispatch, task]);\n\n  const moveQuick = useCallback(() => {\n    move(task, TaskType.Quick, dispatch);\n  }, [dispatch, task]);\n\n  const movePDP = useCallback(() => {\n    move(task, TaskType.PDP, dispatch);\n  }, [dispatch, task]);\n\n  const moveImportant = useCallback(() => {\n    const updates = [];\n    if (importantTask && importantTask.text !== '') {\n      updates.push({ ...importantTask, id: nanoid(), type: TaskType.Other });\n    }\n    updates.push({ ...task, id: 'most', type: TaskType.Most });\n    deleteTask(task.id, dispatch);\n    deleteTask('most', dispatch);\n    dispatch(tasksUpdated(updates));\n  }, [dispatch, importantTask, task]);\n\n  const onDelete = useCallback(() => deleteTask(task.id, dispatch), [dispatch, task.id]);\n  const onOpen = useCallback(() => {\n    const buttonPos = buttonRef.current.getBoundingClientRect();\n    setDims({ right: buttonPos.right, top: buttonPos.y });\n  }, []);\n  return (\n    <PortalWithState closeOnOutsideClick closeOnEsc onOpen={onOpen}>\n      {({ openPortal, closePortal, isOpen, portal }) => (\n        <React.Fragment>\n          <StyledIconButton ref={buttonRef} onClick={openPortal}>\n            <svg fill=\"currentcolor\" width=\"16\" height=\"16\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 16 16\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M10 2a2 2 0 11-4 0 2 2 0 014 0zm0 6a2 2 0 11-4 0 2 2 0 014 0zm-2 8a2 2 0 100-4 2 2 0 000 4z\"\n              ></path>\n            </svg>\n          </StyledIconButton>\n          {portal(\n            <StyledCard\n              variant=\"menu\"\n              sx={{\n                left: dims.right - 150,\n                top: dims.top + 40,\n              }}\n              // onClick={closePortal}\n            >\n              <UL>\n                <LI onClick={onDelete}>Delete</LI>\n                {task.type === TaskType.Other && <LI onClick={moveImportant}>Most Important</LI>}\n                {task.type !== TaskType.Other && <LI onClick={moveOther}>Move to Other</LI>}\n                {task.type !== TaskType.Quick && <LI onClick={moveQuick}>Move to Quick</LI>}\n                {task.type !== TaskType.PDP && <LI onClick={movePDP}>Move to PDP</LI>}\n              </UL>\n            </StyledCard>\n          )}\n        </React.Fragment>\n      )}\n    </PortalWithState>\n  );\n};\ntype LIProps = {\n  children: any;\n  onClick?: any;\n};\nconst LI: FC<LIProps> = ({ children, onClick }) => {\n  return (\n    <Box\n      as=\"li\"\n      sx={{\n        borderRadius: 4,\n        cursor: 'pointer',\n        padding: 1,\n        ':hover': {\n          bg: 'primary',\n          color: 'background',\n        },\n      }}\n      onClick={onClick}\n    >\n      {children}\n    </Box>\n  );\n};\n\nconst StyledIconButton = styled(IconButton)`\n  cursor: pointer;\n  position: relative;\n`;\n\nconst StyledCard = styled(Card)`\n  position: absolute;\n  width: 150px;\n`;\n\nconst UL = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n`;\n","import React, { FC, useState, useCallback, useRef, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from '@emotion/styled';\nimport { Task as iTask, taskUpdated } from './taskSlice';\nimport { Flex, Input, Checkbox, Label } from 'theme-ui';\n\nimport { TaskMenu } from './taskMenu';\n\ntype TaskProps = {\n  task: iTask;\n};\nexport const Task: FC<TaskProps> = ({ task }) => {\n  const [taskValue, setTaskValue] = useState('');\n  const [complete, setComplete] = useState(false);\n  const handleChange = useCallback((ev) => setTaskValue(ev.target.value), []);\n  const dispatch = useDispatch();\n  const inputEl = useRef<any>(null);\n  useEffect(() => {\n    setComplete(task.complete);\n    setTaskValue(task.text);\n  }, [task]);\n  const updateTask = useCallback((updatedTask: any) => dispatch(taskUpdated(updatedTask)), [dispatch]);\n  const handleBlur = useCallback(\n    (ev) => {\n      if (taskValue.trim() !== '') {\n        updateTask({ id: task.id, text: taskValue });\n      }\n    },\n    [task.id, taskValue, updateTask]\n  );\n  const handleKeypress = useCallback((ev) => {\n    if (ev.key === 'Enter') {\n      inputEl.current.blur();\n    }\n  }, []);\n  const handleCheck = useCallback(\n    (ev) => {\n      const nTask = {\n        id: task.id,\n        complete: !complete,\n        completed: !complete ? new Date().toString() : null,\n      };\n      updateTask(nTask);\n    },\n    [complete, task.id, updateTask]\n  );\n  return (\n    <StyledFlex paddingBottom={2} paddingTop={2}>\n      <StyledLabel>\n        <Checkbox checked={complete} onChange={handleCheck} />\n      </StyledLabel>\n      <StyledInput\n        ref={inputEl}\n        onBlur={handleBlur}\n        onKeyDown={handleKeypress}\n        onChange={handleChange}\n        bg={complete ? 'background' : 'muted'}\n        value={taskValue}\n        color={complete ? 'primary' : 'text'}\n        sx={{ textDecoration: complete ? 'line-through' : 'none' }}\n      />\n      <TaskMenu task={task} />\n    </StyledFlex>\n  );\n};\n\nconst StyledInput = styled(Input)`\n  border: none;\n`;\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n`;\n\nconst StyledLabel = styled(Label)`\n  width: auto;\n`;\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\n// import styled from '@emotion/styled';\nimport { RootState } from '../../app/store';\nimport { TaskType, Task as iTask, taskSelectors } from './taskSlice';\nimport { Box } from 'theme-ui';\nimport { Task } from './Task';\n\ntype TasksListProps = {\n  type: TaskType;\n};\n\nexport const TasksList: FC<TasksListProps> = ({ type }) => {\n  const tasks = useSelector((state: RootState) => {\n    return taskSelectors.selectAll(state);\n  });\n  let listTasks = tasks.filter((t: iTask) => t.type === type);\n  listTasks.sort((a, b) => {\n    if ((a.complete && b.complete) || (!a.complete && !b.complete)) {\n      return 0;\n    }\n    if (a.complete) {\n      return 1;\n    }\n    return -1;\n  });\n  return (\n    <Box>\n      {listTasks.map((t: iTask) => (\n        <Task key={t.id} task={t} />\n      ))}\n    </Box>\n  );\n};\n","import React, { FC, useState, useCallback, useRef, useMemo, useEffect } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nimport { useDispatch } from 'react-redux';\nimport styled from '@emotion/styled';\nimport { RootState } from '../../app/store';\nimport { taskUpdated, taskSelectors, TaskType, tasksUpdated } from './taskSlice';\nimport { Flex, Input, Checkbox, Label, Box } from 'theme-ui';\n\ntype TaskProps = {\n  taskId: string;\n  taskType: TaskType;\n  className?: string;\n};\n\nconst ST: FC<TaskProps> = ({ taskId, taskType, className }) => {\n  const taskSelector = useMemo(() => taskSelectors.selectById, []);\n  let task = useSelector((state: RootState) => taskSelector(state, taskId), shallowEqual);\n\n  const [taskValue, setTaskValue] = useState('');\n  const [complete, setComplete] = useState(false);\n  const handleChange = useCallback((ev) => setTaskValue(ev.target.value), []);\n  const dispatch = useDispatch();\n  const inputEl = useRef<any>(null);\n  const updateTask = useCallback((updatedTask: any) => dispatch(taskUpdated(updatedTask)), [dispatch]);\n  useEffect(() => {\n    if (task) {\n      setComplete(task.complete);\n      setTaskValue(task.text);\n    }\n  }, [task]);\n  const handleBlur = useCallback(\n    (ev) => {\n      if (taskValue.trim() !== '') {\n        let update;\n        if (!task) {\n          update = {\n            id: taskId,\n            text: taskValue,\n            complete: false,\n            created: new Date().toString(),\n            updated: new Date().toString(),\n            type: taskType,\n          };\n        } else {\n          update = { ...task, text: taskValue };\n        }\n        updateTask(update);\n      }\n    },\n    [task, taskId, taskType, taskValue, updateTask]\n  );\n  const handleKeypress = useCallback((ev) => {\n    if (ev.key === 'Enter') {\n      inputEl.current.blur();\n    }\n  }, []);\n  const handleCheck = useCallback(\n    (ev) => {\n      const nTask = {\n        id: taskId,\n        complete: !complete,\n        completed: !complete ? new Date().toString() : null,\n      };\n      updateTask(nTask);\n    },\n    [complete, taskId, updateTask]\n  );\n  return (\n    <StyledFlex className={className} paddingBottom={3}>\n      <StyledLabel>\n        <Checkbox checked={complete} onChange={handleCheck} />\n      </StyledLabel>\n      <StyledInput\n        ref={inputEl}\n        onBlur={handleBlur}\n        onKeyDown={handleKeypress}\n        onChange={handleChange}\n        bg={complete ? 'background' : 'muted'}\n        color={complete ? 'primary' : 'text'}\n        sx={{ textDecoration: complete ? 'line-through' : 'none' }}\n        value={taskValue}\n      />\n      <SpaceBox />\n    </StyledFlex>\n  );\n};\n\nexport const StaticTask = styled(ST)``;\n\nconst StyledInput = styled(Input)`\n  border: none;\n`;\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n`;\n\nconst StyledLabel = styled(Label)`\n  width: auto;\n`;\nconst SpaceBox = styled(Box)`\n  width: 32px;\n`;\n","import React, { FC, useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from '@emotion/styled';\nimport { Flex, Input, Box } from 'theme-ui';\nimport { nanoid } from 'nanoid';\n\nimport { TaskType, Task, taskAdded } from './taskSlice';\n\ntype NewTaskProps = {\n  taskType: TaskType;\n};\n\nexport const NewTask: FC<NewTaskProps> = ({ taskType }) => {\n  const [textVal, setTextVal] = useState('');\n  const dispatch = useDispatch();\n  const handleChange = useCallback((ev) => setTextVal(ev.target.value), []);\n  const onKeypress = useCallback(\n    (ev) => {\n      setTextVal(ev.target.value);\n      if (ev.key === 'Enter' && textVal.trim() !== '') {\n        let task: Task = {\n          id: nanoid(),\n          text: textVal,\n          created: new Date().toString(),\n          updated: new Date().toString(),\n          complete: false,\n          type: taskType,\n        };\n        setTextVal('');\n        dispatch(taskAdded(task));\n      }\n    },\n    [dispatch, taskType, textVal]\n  );\n\n  return (\n    <StyledFlex paddingTop={3} paddingBottom={3}>\n      <SpaceBox />\n      <StyledInput\n        backgroundColor=\"primary\"\n        placeholder=\"New Task\"\n        onChange={handleChange}\n        onKeyDown={onKeypress}\n        bg=\"background\"\n        sx={{ borderColor: 'muted', borderWidth: 2 }}\n        value={textVal}\n      />\n      <SpaceBox />\n    </StyledFlex>\n  );\n};\n\nconst StyledInput = styled(Input)``;\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n`;\nconst SpaceBox = styled(Box)`\n  width: 32px;\n`;\n","import React from 'react';\r\nimport { ThemeProvider, Grid, Container, Heading, Box } from 'theme-ui';\r\nimport theme from './themes/start';\r\nimport styled from '@emotion/styled';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport { persistor } from './app/store';\r\nimport { NewDay } from './features/task/NewDay';\r\nimport { TasksList } from './features/task/TasksList';\r\nimport { StaticTask } from './features/task/StaticTask';\r\nimport { NewTask } from './features/task/NewTask';\r\nimport { TaskType } from './features/task/taskSlice';\r\nimport { Flex } from 'rebass';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Container p={3}>\r\n          <Flex as=\"nav\" justifyContent=\"flex-end\">\r\n            <NewDay />\r\n          </Flex>\r\n          <Grid gap={3}>\r\n            <Box>\r\n              <Heading>Rhythm</Heading>\r\n              <Grid columns={[4, '1fr 1fr 1fr 1fr']}>\r\n                <StaticTask taskType={TaskType.Rhythm} taskId=\"rhythm-1\" />\r\n                <StaticTask taskType={TaskType.Rhythm} taskId=\"rhythm-2\" />\r\n                <StaticTask taskType={TaskType.Rhythm} taskId=\"rhythm-3\" />\r\n                <StaticTask taskType={TaskType.Rhythm} taskId=\"rhythm-4\" />\r\n              </Grid>\r\n            </Box>\r\n            <Box>\r\n              <Heading>Most Important</Heading>\r\n              <MainTask taskType={TaskType.Most} taskId=\"most\" />\r\n            </Box>\r\n            <Box>\r\n              <Heading>Other</Heading>\r\n              <TasksList type={TaskType.Other} />\r\n              <NewTask taskType={TaskType.Other} />\r\n            </Box>\r\n            <Grid gap={4} columns={[2, '1fr 1fr']}>\r\n              <Box>\r\n                <Heading>Quick</Heading>\r\n                <TasksList type={TaskType.Quick} />\r\n                <NewTask taskType={TaskType.Quick} />\r\n              </Box>\r\n              <Box>\r\n                <Heading>Pass Delegate or Postpone</Heading>\r\n                <TasksList type={TaskType.PDP} />\r\n                <NewTask taskType={TaskType.PDP} />\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </PersistGate>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst MainTask = styled(StaticTask)`\r\n  font-size: 150%;\r\n`;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}